"use strict";

var _vitest = require("vitest");
var _author = require("./author");
(0, _vitest.describe)("findMapAuthorByEmail", () => {
  (0, _vitest.it)("should return the registered creator by email", () => {
    const creators = [{
      name: "John Doe",
      mapByEmailAliases: ["example1@example.com"]
    }];
    const creator = (0, _author.findMapAuthorByEmail)(creators, "example1@example.com");
    (0, _vitest.expect)(creator).toEqual(creators[0]);
  });
});
(0, _vitest.describe)("findMapAuthorByName", () => {
  (0, _vitest.it)("should return the registered creator by name", () => {
    const creators = [{
      name: "John Doe"
    }];
    const creator = (0, _author.findMapAuthorByName)(creators, "John Doe");
    (0, _vitest.expect)(creator).toEqual(creators[0]);
  });
  (0, _vitest.it)("should return the registered creator by nameAliases", () => {
    const creators = [{
      name: "John Doe",
      mapByNameAliases: ["Johndoe"]
    }];
    const creator = (0, _author.findMapAuthorByName)(creators, "Johndoe");
    (0, _vitest.expect)(creator).toEqual(creators[0]);
  });
});
(0, _vitest.describe)("findMapAuthorLink", () => {
  (0, _vitest.it)("should return the registered creator plain link", () => {
    const creator = {
      name: "John Doe",
      links: "github.com/johndoe"
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual("github.com/johndoe");
  });
  (0, _vitest.it)("should return the registered creator link", () => {
    const creator = {
      name: "John Doe",
      links: [{
        type: "github",
        link: "github.com/johndoe"
      }]
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual("github.com/johndoe");
  });
  (0, _vitest.it)("should return the registered creator link follow by the priorities", () => {
    const creator = {
      name: "John Doe",
      links: [{
        type: "twitter",
        link: "twitter.com/johndoe"
      }, {
        type: "github",
        link: "github.com/johndoe"
      }]
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual("github.com/johndoe");
  });
  (0, _vitest.it)("should return the registered creator link follow by the priorities over twitter", () => {
    const creator = {
      name: "John Doe",
      links: [{
        type: "twitter",
        link: "twitter.com/johndoe"
      }]
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual("twitter.com/johndoe");
  });
  (0, _vitest.it)("should return the registered creator link with only one link", () => {
    const creator = {
      name: "John Doe",
      links: [{
        type: "personal",
        link: "example.com"
      }, {
        type: "personal",
        link: "example2.com"
      }, {
        type: "personal",
        link: "example3.com"
      }]
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual("example.com");
  });
  (0, _vitest.it)("should return the registered creator link with no links", () => {
    const creator = {
      name: "John Doe",
      username: "johndoe"
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual("https://github.com/johndoe");
  });
  (0, _vitest.it)("should return undefined when no links and username", () => {
    const creator = {
      name: "John Doe"
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual(void 0);
  });
  (0, _vitest.it)("should return undefined when links is empty string", () => {
    const creator = {
      name: "John Doe",
      links: ""
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual(void 0);
  });
  (0, _vitest.it)("should return undefined when links is empty array", () => {
    const creator = {
      name: "John Doe",
      links: []
    };
    const link = (0, _author.findMapAuthorLink)(creator);
    (0, _vitest.expect)(link).toEqual(void 0);
  });
});
(0, _vitest.describe)("newAvatarForAuthor", () => {
  (0, _vitest.it)("should return the mapped author avatar", async () => {
    const mappedAuthor = {
      avatar: "https://example.com/avatar.png"
    };
    const avatar = await (0, _author.newAvatarForAuthor)(mappedAuthor, {
      author_name: "John Doe",
      author_email: "user@example.com",
      author_avatar: "abcd"
    });
    (0, _vitest.expect)(avatar).toEqual("https://example.com/avatar.png");
  });
  (0, _vitest.it)("should return the mapped author avatar with username", async () => {
    const mappedAuthor = {
      username: "johndoe"
    };
    const avatar = await (0, _author.newAvatarForAuthor)(mappedAuthor, {
      author_name: "John Doe",
      author_email: "example.com",
      author_avatar: "abcd"
    });
    (0, _vitest.expect)(avatar).toEqual("https://github.com/johndoe.png");
  });
  (0, _vitest.it)("should return the commit author avatar", async () => {
    const avatar = await (0, _author.newAvatarForAuthor)(void 0, {
      author_name: "John Doe",
      author_email: "",
      author_avatar: "abcd"
    });
    (0, _vitest.expect)(avatar).toEqual("https://gravatar.com/avatar/abcd?d=retro");
  });
  (0, _vitest.it)("should return the commit author avatar with email", async () => {
    const avatar = await (0, _author.newAvatarForAuthor)(void 0, {
      author_name: "John Doe",
      author_email: "user@example.com",
      author_avatar: ""
    });
    (0, _vitest.expect)(avatar).toEqual("https://gravatar.com/avatar/b4c9a289323b21a01c3e940f150eb9b8c542587f1abfd8f0e1cc1ffc5e475514?d=retro");
  });
});
(0, _vitest.describe)("mapCommitAuthors", () => {
  (0, _vitest.it)("should be ok", async () => {
    const mappedCreators = {};
    await (0, _author.mapCommitAuthors)([], mappedCreators, {
      author_name: "John Doe",
      author_email: "user@example.com",
      author_avatar: "abcd"
    });
    (0, _vitest.expect)(mappedCreators).toEqual({
      "John Doe": {
        name: "John Doe",
        avatarUrl: "https://gravatar.com/avatar/abcd?d=retro",
        commitsCount: 1,
        url: void 0
      }
    });
  });
  (0, _vitest.it)("should map mapped author by name alias", async () => {
    const mappedCreators = {};
    await (0, _author.mapCommitAuthors)([{
      name: "Altered name",
      avatar: "https://example.com/avatar.png",
      mapByNameAliases: ["John Doe"]
    }], mappedCreators, {
      author_name: "John Doe",
      author_email: "user@example.com",
      author_avatar: "abcd"
    });
    (0, _vitest.expect)(mappedCreators).toEqual({
      "Altered name": {
        name: "Altered name",
        avatarUrl: "https://example.com/avatar.png",
        commitsCount: 1,
        url: void 0
      }
    });
  });
  (0, _vitest.it)("should map mapped author by email alias", async () => {
    const mappedCreators = {};
    const mapCreatorConfig = [{
      name: "Altered name",
      avatar: "https://example.com/avatar.png",
      mapByEmailAliases: ["user@example.com", "user2@example.com"]
    }];
    await (0, _author.mapCommitAuthors)(mapCreatorConfig, mappedCreators, {
      author_name: "John Doe",
      author_email: "user@example.com",
      author_avatar: "abcd"
    });
    await (0, _author.mapCommitAuthors)(mapCreatorConfig, mappedCreators, {
      author_name: "John Doe",
      author_email: "user2@example.com",
      author_avatar: "abcd"
    });
    (0, _vitest.expect)(mappedCreators).toEqual({
      "Altered name": {
        name: "Altered name",
        avatarUrl: "https://example.com/avatar.png",
        commitsCount: 2,
        url: void 0
      }
    });
  });
});
(0, _vitest.describe)("extractAuthorsWithMultiple", () => {
  (0, _vitest.it)("should match multiple authors", async () => {
    const multipleAuthors = `
Co-authored-by: Standard <standard@example.com>
    Co-authored-by:         Spaced LastSpaced       <spaced@example.com>      `;
    const authors = {};
    await (0, _author.extractAuthorsWithMultiple)([], authors, {
      body: multipleAuthors
    });
    (0, _vitest.expect)(authors).toEqual({
      "Standard": {
        name: "Standard",
        commitsCount: 1,
        avatarUrl: "https://gravatar.com/avatar/1f39f2ec8cfad7452e421075f63b5c70fbee98736bd91b52d20161f8148ce38d?d=retro",
        url: void 0
      },
      "Spaced LastSpaced": {
        name: "Spaced LastSpaced",
        commitsCount: 1,
        avatarUrl: "https://gravatar.com/avatar/d2bb5cf8baea77e9c60741c9815f13128ea1928b8a5342362af99d1f6fa69e07?d=retro",
        url: void 0
      }
    });
  });
});
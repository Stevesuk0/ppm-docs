{"version":3,"file":"index.mjs","sources":["../../src/vite/helpers.ts","../../src/vite/git.ts","../../src/vite/markdownSection.ts"],"sourcesContent":["import { basename, dirname, extname, posix, relative, sep, win32 } from 'node:path'\nimport { subtle } from 'uncrypto'\nimport { normalizePath } from 'vite'\nimport { execa } from 'execa'\nimport type { Commit } from '../types'\n\nexport interface Helpers {\n  /**\n   * A helper function to help to determine whether the passed string parameter equals the\n   * current transforming module ID with normalization of paths capabilities and\n   * cross platform / OS compatibilities.\n   *\n   * @param equalsWith - String to equal with\n   * @returns boolean\n   */\n  idEquals: (equalsWith: string) => boolean\n  /**\n   * A helper function to help to determine whether the passed string parameter startsWith the\n   * current transforming module ID with normalization of paths capabilities and\n   * cross platform / OS compatibilities.\n   *\n   * @param startsWith - String to start with\n   * @returns boolean\n   */\n  idStartsWith: (startsWith: string) => boolean\n  /**\n   * A helper function to help to determine whether the passed string parameter endsWith the\n   * current transforming module ID with normalization of paths capabilities and\n   * cross platform / OS compatibilities.\n   *\n   * @param endsWith - String to end with\n   * @returns boolean\n   */\n  idEndsWith: (endsWith: string) => boolean\n  /**\n   * A helper function to help to determine whether the passed first path parameter\n   * equals the second passed string with normalization of paths capabilities and\n   * cross platform / OS compatibilities.\n   *\n   * @param path - Path to be compared with\n   * @param equalsWith - String to equal with\n   * @returns boolean\n   */\n  pathEquals: (path: string, equalsWith: string) => boolean\n  /**\n   * A helper function to help to determine whether the passed first path parameter\n   * startsWith the second passed string with normalization of paths capabilities and\n   * cross platform / OS compatibilities.\n   *\n   * @param path - Path to be compared with\n   * @param startsWith - String to start with\n   * @returns boolean\n   */\n  pathStartsWith: (path: string, startsWith: string) => boolean\n  /**\n   * A helper function to help to determine whether the passed first path parameter\n   * endsWith the second passed string with normalization of paths capabilities and\n   * cross platform / OS compatibilities.\n   *\n   * @param path - Path to be compared with\n   * @param endsWith - String to end with\n   * @returns boolean\n   */\n  pathEndsWith: (path: string, endsWith: string) => boolean\n}\n\nexport function pathEquals(path: string, equals: string): boolean {\n  return normalizePath(path) === (normalizePath(equals))\n}\n\nexport function pathStartsWith(path: string, startsWith: string): boolean {\n  return normalizePath(path).startsWith(normalizePath(startsWith))\n}\n\nexport function pathEndsWith(path: string, startsWith: string): boolean {\n  return normalizePath(path).endsWith(normalizePath(startsWith))\n}\n\nexport function createHelpers(root: string, id: string): Helpers {\n  const relativeId = relative(root, id)\n\n  return {\n    pathStartsWith,\n    pathEquals,\n    pathEndsWith,\n    idEndsWith(endsWith: string) {\n      return pathEndsWith(relativeId, endsWith)\n    },\n    idEquals(equals: string) {\n      return pathEquals(relativeId, equals)\n    },\n    idStartsWith(startsWith: string) {\n      return pathStartsWith(relativeId, startsWith)\n    },\n  }\n}\n\n/**\n * Hashes a string using SHA-256\n *\n * Official example by MDN: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\n * @param {string} message - The message to be hashed\n * @returns {Promise<string>} - The SHA-256 hash of the message\n */\nexport async function digestStringAsSHA256(message: string) {\n  const msgUint8 = new TextEncoder().encode(message) // encode as (utf-8) Uint8Array\n  const hashBuffer = await subtle.digest('SHA-256', msgUint8) // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)) // convert buffer to byte array\n  const hashHex = hashArray\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('') // convert bytes to hex string\n  return hashHex\n}\n\nexport function normalizeGitLogPath(path: string[][]) {\n  // normalize paths\n  for (const [index, files] of path.entries()) {\n    if (files[1])\n      path[index][1] = normalizePath(files[1])\n\n    if (files[2])\n      path[index][2] = normalizePath(files[2])\n  }\n\n  return path\n}\n\nexport type CommitToStringHandler = (commit: Commit) => string | Promise<string> | null | undefined\nexport type CommitToStringsHandler = (commit: Commit) => string[] | Promise<string[]> | null | undefined\nexport type CommitAndPathToStringHandler = (commit: Commit, path: string) => string | Promise<string> | null | undefined\nexport interface RewritePathsBy { handler?: CommitAndPathToStringHandler }\n\nexport const defaultCommitURLHandler = (commit: Commit) => `${commit.repo_url}/commit/${commit.hash}`\nexport const defaultReleaseTagURLHandler = (commit: Commit) => `${commit.repo_url}/releases/tag/${commit.tag}`\nexport const defaultReleaseTagsURLHandler = (commit: Commit) => commit.tags?.map(tag => `${commit.repo_url}/releases/tag/${tag}`)\n\nexport async function returnOrResolvePromise<T>(val: T | Promise<T>) {\n  if (!(val instanceof Promise))\n    return val\n\n  return await val\n}\n\nexport function rewritePaths(path: string, rewritePaths: Record<string, string>) {\n  // rewrite paths\n  for (const [key, value] of Object.entries(rewritePaths))\n    path = path.replace(key, value)\n\n  return path\n}\n\nexport async function rewritePathsByPatterns(commit: Commit, path: string, patterns?: RewritePathsBy): Promise<string> {\n  if (typeof patterns === 'undefined' || patterns === null)\n    return path\n\n  if ('handler' in patterns && typeof patterns.handler === 'function') {\n    const resolvedPath = await returnOrResolvePromise(patterns.handler(commit, path))\n    if (!resolvedPath)\n      return path\n\n    return resolvedPath\n  }\n\n  return path\n}\n\n/**\n * A rewritePathsBy.handler handler that rewrites paths by rewriting the extension.\n *\n * @example\n *\n * ```typescript\n * import { GitChangelog, rewritePathsByRewritingExtension } from '@nolebase/vitepress-plugin-git-changelog/vite'\n *\n * GitChangelog({\n *   rewritePathsBy: {\n *     // to rewrite `example.md` to `example.html`\n *     handler: rewritePathsByRewritingExtension('.md', '.html')\n *   }\n * })\n * ```\n *\n * @param from - The extension to rewrite from.\n * @param to - The extension to rewrite to.\n * @returns A handler that rewrites paths by rewriting the extension.\n */\nexport function rewritePathsByRewritingExtension(from: string, to: string) {\n  return (_: Commit, path: string) => {\n    const ext = extname(path)\n    if (ext !== from)\n      return path\n\n    return path.replace(new RegExp(`${from}$`), to)\n  }\n}\n\nexport function parseGitLogRefsAsTags(refs?: string): string[] {\n  if (!refs)\n    return []\n\n  const refsArray = refs.split(', ').map(ref => ref.trim())\n  const tags = refsArray.filter(ref => ref.startsWith('tag: '))\n  if (!tags)\n    return []\n\n  return tags.map(tag => tag.replace('tag: ', '').trim())\n}\n\n/**\n * Generate RegExp for filtering out paths of commits.\n *\n * It follows the rules that:\n * - includes is not set, it is /^.+.md$/\n * - includeDirs is set, it is /^(${includeDirs.join('|')})\\/.+.md$/\n * - includeExtensions is set, it is /^.+(${includeExtensions.join('|')})$/\n * - in another word, /^(includeDir1|includeDir2)\\/.+(includeExtension1|includeExtensions2)$/\n *\n * @deprecated\n */\nexport function generateCommitPathsRegExp(includeDirs: string[], includeExtensions: `.${string}`[]): RegExp {\n  return new RegExp(`^${includeDirs.length > 0 ? `(${includeDirs.join('|')})${sep === win32.sep ? win32.sep : `\\\\${posix.sep}`}` : ''}.+${includeExtensions.length > 0 ? `(${includeExtensions.join('|')})` : '.md'}$`)\n}\n\nexport async function getRawCommitLogs(file: string, maxGitLogCount?: number) {\n  const fileDir = dirname(file)\n  const fileName = basename(file)\n  /**\n   * The format of git log.\n   *\n   * ${commit_hash} ${author_name} ${author_email} ${author_date} ${subject} ${ref} ${body}\n   *\n   * @see {@link https://git-scm.com/docs/pretty-formats | documentation} for details.\n   *\n   * Note: Make sure that `body` is in last position, as `\\n` or `|` in body may breaks subsequent processing.\n   *\n   * @example stdout\n   *\n   * ```bash\n   * $ git log --format=\"%H|%an|%ae|%ad|%s|%d|%b[GIT_LOG_COMMIT_END]\" --follow docs/pages/en/integrations/index.md\n   * 62ef7ed8f54ea1faeacf6f6c574df491814ec1b1|Neko Ayaka|neko@ayaka.moe|Wed Apr 24 14:24:44 2024 +0800|docs: fix english integrations list||Signed-off-by: Neko Ayaka <neko@ayaka.moe>\n   * [GIT_LOG_COMMIT_END]\n   * 34357cc0956db77d1fc597327ba880d7eebf67ce|Rizumu Ayaka|rizumu@ayaka.moe|Mon Apr 22 22:51:24 2024 +0800|release: pre-release v2.0.0-rc10| (tag: v2.0.0-rc10)|Signed-off-by: Rizumu Ayaka <rizumu@ayaka.moe>\n   * [GIT_LOG_COMMIT_END]\n   * (END)\n   * ```\n   */\n  const format = '%H|%an|%ae|%ad|%s|%d|%b'\n  const { stdout } = await execa('git', ['log', `--max-count=${maxGitLogCount ?? -1}`, `--format=${format}[GIT_LOG_COMMIT_END]`, '--follow', '--', fileName], { cwd: fileDir })\n  // remove \"[GIT_LOG_COMMIT_END]\" in last line: split stdout into lines and avoid empty strings\n  return stdout.replace(/\\[GIT_LOG_COMMIT_END\\]$/, '').split('[GIT_LOG_COMMIT_END]\\n')\n}\n\nexport function getRelativePath(file: string, srcDir: string, cwd: string) {\n  cwd = normalizePath(cwd)\n  return file.replace(srcDir, '').replace(cwd, '').replace(/^\\//, '')\n}\n\nexport async function parseCommits(\n  path: string,\n  rawLogs: string[],\n  getRepoURL: CommitToStringHandler,\n  getCommitURL: CommitToStringHandler,\n  getReleaseTagURL: CommitToStringHandler,\n  getReleaseTagsURL: CommitToStringsHandler,\n  optsRewritePathsBy?: RewritePathsBy,\n): Promise<Commit[]> {\n  rawLogs = rawLogs.filter(log => !!log)\n\n  const commits = await Promise.all(rawLogs.map(async (raw) => {\n    const [hash, author_name, author_email, date, message, refs, body] = raw.split('|').map(v => v.trim())\n    const commit: Commit = {\n      path,\n      hash,\n      date,\n      date_timestamp: 0,\n      message,\n      body,\n      author_name,\n      author_email,\n      author_avatar: '',\n    }\n\n    // rewrite path\n    if (typeof optsRewritePathsBy !== 'undefined')\n      commit.path = await rewritePathsByPatterns(commit, commit.path, optsRewritePathsBy)\n\n    // repo url\n    commit.repo_url = (await returnOrResolvePromise(getRepoURL(commit))) ?? 'https://github.com/example/example'\n    // hash url\n    commit.hash_url = (await returnOrResolvePromise(getCommitURL(commit))) ?? defaultCommitURLHandler(commit)\n\n    // remove `()` in refs, e.g. ` (tag: v2.0.0-rc7)`\n    const tags = parseGitLogRefsAsTags(refs?.replace(/[()]/g, ''))\n\n    // release logs\n    if (tags && tags.length > 0) {\n      commit.tags = tags\n      commit.tag = commit.tags?.[0] || undefined\n      commit.release_tag_url = (await returnOrResolvePromise(getReleaseTagURL(commit))) ?? defaultReleaseTagURLHandler(commit)\n      commit.release_tags_url = (await returnOrResolvePromise(getReleaseTagsURL(commit))) ?? defaultReleaseTagsURLHandler(commit)\n    }\n\n    // timestamp\n    commit.date_timestamp = new Date(commit.date).getTime()\n    // generate author avatar based on md5 hash of email (gravatar style)\n    commit.author_avatar = await digestStringAsSHA256(commit.author_email)\n\n    return commit\n  }))\n\n  return commits\n}\n","import { cwd as _cwd } from 'node:process'\nimport { join } from 'node:path'\nimport { type Plugin, type ResolvedConfig, normalizePath } from 'vite'\nimport type { SiteConfig } from 'vitepress'\nimport ora from 'ora'\nimport { cyan, gray } from 'colorette'\nimport { globby } from 'globby'\nimport { execa } from 'execa'\n\nimport type { Changelog, Commit } from '../types'\nimport {\n  type CommitToStringHandler,\n  type CommitToStringsHandler,\n  type RewritePathsBy,\n  defaultCommitURLHandler,\n  defaultReleaseTagURLHandler,\n  defaultReleaseTagsURLHandler,\n  getRawCommitLogs,\n  getRelativePath,\n  parseCommits,\n  rewritePathsByRewritingExtension,\n} from './helpers'\nimport type { GitChangelogOptions } from './types'\n\nexport type {\n  CommitToStringHandler,\n  CommitToStringsHandler,\n  RewritePathsBy,\n}\n\nexport {\n  rewritePathsByRewritingExtension,\n}\n\ninterface VitePressConfig extends ResolvedConfig {\n  vitepress: SiteConfig\n}\n\nconst VirtualModuleID = 'virtual:nolebase-git-changelog'\nconst ResolvedVirtualModuleId = `\\0${VirtualModuleID}`\n\nconst logModulePrefix = `${cyan(`@nolebase/vitepress-plugin-git-changelog`)}${gray(':')}`\n\nexport function GitChangelog(options: GitChangelogOptions = {}): Plugin {\n  if (!options)\n    options = {}\n\n  const {\n    cwd = _cwd(),\n    maxGitLogCount,\n    include = ['**/*.md', '!node_modules'],\n    repoURL = 'https://github.com/example/example',\n    getReleaseTagURL = defaultReleaseTagURLHandler,\n    getReleaseTagsURL = defaultReleaseTagsURLHandler,\n    getCommitURL = defaultCommitURLHandler,\n    rewritePathsBy,\n  } = options\n\n  const getRepoURL = typeof repoURL === 'function' ? repoURL : () => repoURL\n\n  const changelog: Changelog = { commits: [] }\n  const hotModuleReloadCachedCommits: Record<string, Commit[]> = {}\n  let srcDir = ''\n  let config: VitePressConfig\n\n  const commitFromPath = async (path: string) => {\n    const rawLogs = await getRawCommitLogs(path, maxGitLogCount)\n    const relativePath = getRelativePath(path, srcDir, cwd)\n    return await parseCommits(\n      relativePath,\n      rawLogs,\n      getRepoURL,\n      getCommitURL,\n      getReleaseTagURL,\n      getReleaseTagsURL,\n      rewritePathsBy,\n    )\n  }\n\n  return {\n    name: '@nolebase/vitepress-plugin-git-changelog',\n    config: () => ({\n      optimizeDeps: {\n        include: [\n          // @rive-app/canvas is a CJS/UMD module, so it needs to be included here\n          // for Vite to properly bundle it.\n          '@nolebase/vitepress-plugin-git-changelog > @nolebase/ui > @rive-app/canvas',\n        ],\n        exclude: [\n          '@nolebase/vitepress-plugin-git-changelog/client',\n        ],\n      },\n      ssr: {\n        noExternal: [\n          '@nolebase/vitepress-plugin-git-changelog',\n          // @nolebase/ui required here as noExternal to avoid the following error:\n          // TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".vue\" for ...\n          // Read more here: https://github.com/vuejs/vitepress/issues/2915\n          // And here: https://stackblitz.com/edit/vite-gjz9zf?file=docs%2F.vitepress%2Fconfig.ts\n          '@nolebase/ui',\n        ],\n      },\n    }),\n    configResolved(_config) {\n      config = _config as VitePressConfig\n      srcDir = config.vitepress.srcDir\n    },\n    async buildStart() {\n      if (config.command !== 'build')\n        return\n\n      const startsAt = Date.now()\n      const spinner = ora({ discardStdin: false, isEnabled: false })\n\n      spinner.start(`${logModulePrefix} Prepare to gather git logs...`)\n\n      if (changelog.commits.length > 0)\n        return\n\n      // configure so that the git log messages can contain correct CJK characters\n      await execa('git', ['config', '--local', 'core.quotepath', 'false'])\n\n      spinner.text = `${logModulePrefix} Gathering git logs...`\n      spinner.color = 'yellow'\n\n      const paths = await globby(include, {\n        gitignore: true,\n        cwd,\n        absolute: true,\n      })\n\n      changelog.commits = (await Promise.all(\n        paths.map(async path => await commitFromPath(path)),\n      ))\n        .flat()\n\n      const elapsed = Date.now() - startsAt\n      spinner.succeed(`${logModulePrefix} Done. ${gray(`(${elapsed}ms)`)}`)\n    },\n    resolveId(id) {\n      if (id === VirtualModuleID)\n        return ResolvedVirtualModuleId\n    },\n    load(id) {\n      if (id !== ResolvedVirtualModuleId)\n        return null\n\n      return `export default ${JSON.stringify(changelog)}`\n    },\n    configureServer(server) {\n      server.hot.on('nolebase-git-changelog:client-mounted', async (data) => {\n        if (!data || typeof data !== 'object')\n          return\n        if (!('page' in data && 'filePath' in data.page))\n          return\n\n        let commits: Commit[] = []\n        if (hotModuleReloadCachedCommits[data.page.filePath]) {\n          commits = hotModuleReloadCachedCommits[data.page.filePath]\n        }\n        else {\n          const path = normalizePath(join(srcDir, data.page.filePath))\n          commits = [...(await commitFromPath(path))]\n          hotModuleReloadCachedCommits[data.page.filePath] = commits\n        }\n        if (!commits.length)\n          return\n\n        const virtualModule = server.moduleGraph.getModuleById(ResolvedVirtualModuleId)\n        if (!virtualModule)\n          return\n\n        changelog.commits = commits\n\n        server.moduleGraph.invalidateModule(virtualModule)\n        server.hot.send({\n          type: 'custom',\n          event: 'nolebase-git-changelog:updated',\n          data: changelog,\n        })\n      })\n    },\n  }\n}\n","import { relative } from 'node:path'\nimport type { Plugin } from 'vite'\nimport GrayMatter from 'gray-matter'\n\nimport { createHelpers } from './helpers'\nimport type { Context, GitChangelogMarkdownSectionOptions } from './types'\n\nexport type {\n  GitChangelogMarkdownSectionOptions,\n  Context,\n}\n\nexport function GitChangelogMarkdownSection(options?: GitChangelogMarkdownSectionOptions): Plugin {\n  const {\n    excludes = ['index.md'],\n    exclude = () => false,\n  } = options ?? {}\n\n  let root = ''\n\n  return {\n    name: '@nolebase/vitepress-plugin-git-changelog-markdown-section',\n    // May set to 'pre' since end user may use vitepress wrapped vite plugin to\n    // specify the plugins, which may cause this plugin to be executed after\n    // vitepress or the other markdown processing plugins.\n    enforce: 'pre',\n    configResolved(config) {\n      root = config.root ?? ''\n    },\n    transform(code, id) {\n      if (!id.endsWith('.md'))\n        return null\n\n      const helpers = createHelpers(root, id)\n\n      if (excludes.includes(relative(root, id)))\n        return null\n      if (exclude(id, { helpers }))\n        return null\n\n      const parsedMarkdownContent = GrayMatter(code)\n\n      if ('nolebase' in parsedMarkdownContent.data && 'gitChangelog' in parsedMarkdownContent.data.nolebase && !parsedMarkdownContent.data.nolebase.gitChangelog)\n        return null\n      if ('gitChangelog' in parsedMarkdownContent.data && !parsedMarkdownContent.data.gitChangelog)\n        return null\n\n      if (!options?.sections?.disableContributors)\n        code = TemplateContributors(code)\n      if (!options?.sections?.disableChangelog)\n        code = TemplateChangelog(code)\n\n      return code\n    },\n  }\n}\n\nfunction TemplateContributors(code: string) {\n  return `${code}\n\n<NolebaseGitContributors />\n`\n}\n\nfunction TemplateChangelog(code: string) {\n  return `${code}\n\n<NolebaseGitChangelog />\n`\n}\n"],"names":["cwd","_cwd"],"mappings":"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"}